<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/task  
	   http://www.springframework.org/schema/task/spring-task-3.1.xsd
       http://www.springframework.org/schema/cache 
       http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
	<!-- 加载配置参数 -->
	<context:property-placeholder location="classpath*:/ruiec.properties" ignore-resource-not-found="true" ignore-unresolvable="true" />
	<!-- 扫描需要spring管理的对象 -->
	<context:component-scan base-package="com.ruiec">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 数据源 -->
	<!-- XA configuration start -->
	<!-- <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
    	<property name="uniqueResourceName" value="ds1"/>  
    	<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>  
    	<property name="xaProperties">  
        	<props>  
            	<prop key="url">jdbc:mysql://192.168.0.41:3306/binary4?useUnicode=true&amp;characterEncoding=UTF-8</prop>  
            	<prop key="user">root</prop>  
            	<prop key="password">root</prop>
            	<prop key="pinGlobalTxToPhysicalConnection">true</prop>
        	</props>  
   		</property>  
    	<property name="minPoolSize" value="30" />
    	<property name="maxPoolSize" value="200" />  
    	<property name="maxLifetime" value="100" />  
    	<property name="borrowConnectionTimeout" value="30" />  
    	<property name="testQuery" value="select 1" />  
    	<property name="maintenanceInterval" value="60" />  
	</bean>
	<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
    	<property name="uniqueResourceName" value="ds2"/>  
    	<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>  
    	<property name="xaProperties">  
        	<props>  
            	<prop key="url">jdbc:mysql://192.168.0.41:3306/binary4?useUnicode=true&amp;characterEncoding=UTF-8</prop>  
            	<prop key="user">root</prop>  
            	<prop key="password">root</prop>
            	<prop key="pinGlobalTxToPhysicalConnection">true</prop>
        	</props>  
   		</property>  
    	<property name="minPoolSize" value="30" />
    	<property name="maxPoolSize" value="200" />  
    	<property name="maxLifetime" value="100" />  
    	<property name="borrowConnectionTimeout" value="30" />  
    	<property name="testQuery" value="select 1" />  
    	<property name="maintenanceInterval" value="60" />  
	</bean> -->
	<!-- XA configuration end -->
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>
	
	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>

	<bean id="multipleDataSource" class="com.ruiec.framework.server.support.datasource.MultipleDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSource" value-ref="dataSource"/>
				<entry key="dataSource2" value-ref="dataSource2"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource"/>
	</bean>
	
	<!-- <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
    	<property name="uniqueResourceName" value="ds1"/>  
    	<property name="xaDataSourceClassName" value="oracle.jdbc.xa.client.OracleXADataSource"/>  
    	<property name="xaProperties">  
        	<props>  
            	<prop key="URL">jdbc:oracle:thin:@127.0.0.1:1521:orcl</prop>  
            	<prop key="user">scott</prop>  
            	<prop key="password">xxl123</prop>
        	</props>  
   		</property>  
    	<property name="minPoolSize" value="10" />
    	<property name="maxPoolSize" value="100" />  
    	<property name="maxLifetime" value="100" />  
    	<property name="borrowConnectionTimeout" value="30" />  
    	<property name="testQuery" value="select 1 from dual" />  
    	<property name="maintenanceInterval" value="60" />  
	</bean> -->
	
	<!-- 数据源 -->
	<!-- <bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
    	<property name="uniqueResourceName" value="ds2"/>  
    	<property name="xaDataSourceClassName" value="com.microsoft.sqlserver.jdbc.SQLServerXADataSource"/>  
    	<property name="xaProperties">  
        	<props>  
            	<prop key="URL">jdbc:sqlserver://192.168.0.15:1433;DatabaseName=dfw</prop>  
            	<prop key="user">sa</prop>  
            	<prop key="password">root</prop>
        	</props>  
   		</property>  
    	<property name="minPoolSize" value="10" />  
    	<property name="maxPoolSize" value="100" />  
    	<property name="borrowConnectionTimeout" value="30" />  
    	<property name="testQuery" value="select 1" />  
    	<property name="maintenanceInterval" value="60" />  
	</bean> -->
	
	<!-- hibernate会话工厂 -->
	<!-- XA configuration start -->
	<!-- <bean id="sessionFactory1"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="entityInterceptor" ref="entityInterceptor" />
		<property name="JtaTransactionManager" ref="transactionManager" />
		<property name="namingStrategy" ref="namingStrategy" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
				hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				hibernate.cache.region.factory_class=${hibernate.cacheRegionFactory}
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				hibernate.current_session_context_class=jta
				hibernate.transaction.factory_class=org.hibernate.transaction.JTATransactionFactory
				hibernate.connection.release_mode=after_transaction
				javax.persistence.validation.mode=none
			</value>
		</property>
		<property name="packagesToScan" value="com.ruiec.server" />
	</bean> -->
	<!-- XA configuration end -->
	
	<!-- hibernate会话工厂 -->
	<!-- XA configuration start -->
	<!-- <bean id="sessionFactory2"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource2" />
		<property name="entityInterceptor" ref="entityInterceptor" />
		<property name="JtaTransactionManager" ref="transactionManager" />
		<property name="namingStrategy" ref="namingStrategy" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.SQLServer2008Dialect
				hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
				hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				hibernate.cache.region.factory_class=${hibernate.cacheRegionFactory}
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				hibernate.current_session_context_class=jta
				hibernate.transaction.factory_class=org.hibernate.transaction.JTATransactionFactory
				hibernate.connection.release_mode=after_transaction
				javax.persistence.validation.mode=none
			</value>
		</property>
		<property name="packagesToScan" value="com.ruiec.server.entity" />
	</bean> -->
	<!-- XA configuration end -->
	
	<bean id="sessionFactory1"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource" />
		<property name="entityInterceptor" ref="entityInterceptor" />
		<!-- <property name="namingStrategy" ref="namingStrategy" /> -->
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
				hibernate.show_sql=${hibernate.show_sql}
				hibernate.format_sql=${hibernate.format_sql}
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				hibernate.cache.region.factory_class=${hibernate.cache_region_factory}
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
				javax.persistence.validation.mode=none
			</value>
		</property>
		<property name="packagesToScan" value="com.ruiec" />
	</bean>
	
	<!-- hibernate命名策略 -->
	<!-- <bean id="namingStrategy" class="com.ruiec.framework.server.support.hibernate.NamingStrategy"/> -->
	
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>
	
	<!-- 分布式事务管理器 -->
	<!-- XA configuration start -->
	<!-- <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">  
    	<property name="transactionManager">  
        	<bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">  
            	<property name="forceShutdown" value="true"/>  
        	</bean>  
    	</property>  
    	<property name="userTransaction">  
        	<bean class="com.atomikos.icatch.jta.UserTransactionImp">
        		<property name="transactionTimeout" value="40"/>
        	</bean>
    	</property>  
    	<property name="allowCustomIsolationLevels" value="true"/>
	</bean> -->
	<!-- XA configuration end -->
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory1"></property>
	</bean>
	
	<!-- 声明式事务配置（采用注解方式配置） -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--就是生成代理bean时以接口类还是实现类(实现类中使用了事务注解，没有使用Transactional注解则没有此要求)，以实现类则需要添加 proxy-target-class="true" -->
	<!-- ehcache缓存配置 -->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
		<property name="shared" value="true" />
	</bean>
	
	<!-- spring缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	
	<!-- 声明式缓存配置 -->
	<cache:annotation-driven cache-manager="cacheManager" />
   
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${task.core_pool_size}" />
		<property name="maxPoolSize" value="${task.max_pool_size}" />
		<property name="queueCapacity" value="${task.queue_capacity}" />
		<property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
	</bean>
	 
	 <!-- 配置注解定时器begin，支持多任务同时运行 -->
	 <task:annotation-driven scheduler="myScheduler"/>
	 <task:scheduler id="myScheduler" pool-size="5"></task:scheduler>
	 <context:annotation-config/>  
     <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
     <context:component-scan base-package="com.ruiec.server.prepareliquidation"/>
     <!-- 配置注解定时器end --> 
</beans>    
